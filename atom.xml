<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>欢迎来到我的主页!</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-04-16T16:40:03.635Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>zsh</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C++之memset和fill函数</title>
    <link href="http://example.com/2021/04/17/C-%E4%B9%8Bmemset%E5%92%8Cfill%E5%87%BD%E6%95%B0/"/>
    <id>http://example.com/2021/04/17/C-%E4%B9%8Bmemset%E5%92%8Cfill%E5%87%BD%E6%95%B0/</id>
    <published>2021-04-16T16:37:45.000Z</published>
    <updated>2021-04-16T16:40:03.635Z</updated>
    
    <content type="html"><![CDATA[<p>引言：memset和fill都能进行赋值操作，但是二者有所区别，使用场景和方法也不同。</p><span id="more"></span><h3 id="1-问题引出">1.问题引出</h3><p>当我们运行下面一段代码试图将数组中的所有数字全部设置为1的时候，会发生预期之外的结果：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> main &#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">5</span>];</span><br><span class="line">    <span class="built_in">memset</span>(a, <span class="number">1</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(a));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        std::cout &lt;&lt; a[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会发现输出以下的结果：</p><p><code>16843009 16843009 16843009 16843009 16843009</code></p><h3 id="2-原因">2.原因</h3><p>为什么和我们的预期不符？这是因为<code>memset()</code>函数是<strong>以字节为单位进行赋值</strong>的，一个int型数据有4个字节，在上面的例子中我们赋的值是十六进制<code>0x01010101</code>，即二进制数<code>00000001 00000001 00000001 00000001</code>，换算成十进制就是16843009，所以会得出上面的结果。</p><p>所以如果想将int型数组置为想要的十进制数，<strong>只能用<code>memset()</code>置为0或者-1</strong>，因为0的二进制表示全为0， -1的二进制表示全为1，按字节为单位完成赋值的结果保持不变。</p><p>一般情况下，<code>memset()</code>只用来给char型数组赋值，或者对int型数组进行全0或者全1操作。</p><h3 id="3-解决方法">3.解决方法</h3><p><code>fill()</code>函数<strong>按照单元进行赋值</strong>，将一个区间的元素都赋予同一个值。如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">int main() &#123;</span><br><span class="line">int a[5];</span><br><span class="line">fill(a, a+5, 1);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以实现对数值中每个元素都赋值为1的目的，也可以对容器进行赋值，注意第一个参数和第二个参数是容器的迭代器。</p><h3 id="4-总结">4.总结</h3><p>1.<code>memset()</code>和<code>fill()</code>都可以实现赋值操作；<br>2.<code>memset()</code>是以字节为单位进行，对int型数组赋值只能赋值为0或者-1，<code>fill()</code>以元素为单位进行。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;引言：memset和fill都能进行赋值操作，但是二者有所区别，使用场景和方法也不同。&lt;/p&gt;</summary>
    
    
    
    <category term="C++" scheme="http://example.com/categories/C/"/>
    
    
    <category term="memset" scheme="http://example.com/tags/memset/"/>
    
    <category term="fill" scheme="http://example.com/tags/fill/"/>
    
  </entry>
  
  <entry>
    <title>详解C++拷贝构造函数和赋值运算符</title>
    <link href="http://example.com/2021/04/13/%E8%AF%A6%E8%A7%A3C-%E6%8B%B7%E8%B4%9D%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%92%8C%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <id>http://example.com/2021/04/13/%E8%AF%A6%E8%A7%A3C-%E6%8B%B7%E8%B4%9D%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%92%8C%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97%E7%AC%A6/</id>
    <published>2021-04-12T17:33:07.000Z</published>
    <updated>2021-04-16T16:40:30.285Z</updated>
    
    <content type="html"><![CDATA[<p>引言：本文主要介绍了拷贝构造函数和赋值运算符的区别，以及在什么时候调用拷贝构造函数、什么情况下调用赋值运算符；同时较为详细的说明了拷贝构造函数必须以引用的方式传递参数。</p><span id="more"></span><h3 id="1-拷贝构造函数和拷贝赋值运算符">1.拷贝构造函数和拷贝赋值运算符</h3><p>在默认情况下（用户没有定义，但是也没有显式的删除），编译器会自动的隐式生成一个拷贝构造函数和赋值运算符。但用户可以使用delete来指定不生成拷贝构造函数和赋值运算符，这样的对象就不能通过值传递，也不能进行赋值运算：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person</span>(<span class="keyword">const</span> Person&amp; p) = <span class="keyword">delete</span>;</span><br><span class="line">Person&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> Person&amp; p) = <span class="keyword">delete</span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line">string name;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>上面的定义的类Person显式的删除了拷贝构造函数和赋值运算符，在需要调用拷贝构造函数或者赋值运算符的地方，会提示无法调用该函数，它是已删除的函数。</p><h3 id="2-何时调用">2.何时调用</h3><p>拷贝构造函数和赋值运算符的行为比较相似，都是将一个对象的值复制给另一个对象；但是其结果却有些不同，拷贝构造函数使用传入对象的值<strong>生成一个新的对象的实例</strong>，而赋值运算符是将对象的值复制给一个<strong>已经存在的实例</strong>。这种区别从两者的名字也可以很轻易的分辨出来，拷贝构造函数也是一种构造函数，那么它的功能就是<strong>创建一个新的对象实例</strong>；赋值运算符是执行某种运算，将一个对象的值复制给另一个<strong>已经存在的对象</strong>。<strong>调用的是拷贝构造函数还是赋值运算符，主要是看是否有新的对象实例产生。如果产生了新的对象实例，那调用的就是拷贝构造函数；如果没有，那就是对已有的对象赋值，调用的是赋值运算符。</strong></p><p><strong>调用拷贝构造函数主要有以下场景：</strong></p><ul><li>对象作为函数的参数，以值传递的方式传给函数；</li><li>对象作为函数的返回值，以值的方式从函数返回；</li><li>使用一个对象给另一个对象初始化</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person</span>() &#123;&#125;;</span><br><span class="line"> <span class="built_in">Person</span>(<span class="keyword">const</span> Person&amp; p) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Copy Constructor&quot;</span> &lt;&lt; endl;</span><br><span class="line"> &#125;</span><br><span class="line"> Person&amp; <span class="keyword">operator</span> = (<span class="keyword">const</span> Person&amp; p) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Assign operator&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line">string name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">do1</span><span class="params">(Person p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Person <span class="title">do2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Person p;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Person p;</span><br><span class="line">Person p1 = p; <span class="comment">// 第一种情况</span></span><br><span class="line">Person p2;</span><br><span class="line">p2 = p; <span class="comment">// 第二种情况</span></span><br><span class="line"><span class="built_in">do1</span>(p2); <span class="comment">// 第三种情况</span></span><br><span class="line">p2 = <span class="built_in">do2</span>(); <span class="comment">// 第四种情况</span></span><br><span class="line">Person p3 = <span class="built_in">do2</span>(); <span class="comment">// 第五种情况</span></span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码定义了一个类Person，显式的定义了拷贝构造函数和赋值运算符。然后定义了两个函数：do1以值传递的方式将对象作为函数的参数传入函数；do2以值的方式返回Person对象。执行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">第一种情况： Copy Constructor</span><br><span class="line">第二种情况： Assign operator</span><br><span class="line">第三种情况： Copy Constructor</span><br><span class="line">第四种情况： Copy Constructor</span><br><span class="line">           Assign operator</span><br><span class="line">第五种情况： Copy Constructor</span><br></pre></td></tr></table></figure><p>分析如下：</p><p>第一种情况：使用已经存在的对象p创建新对象p1，产生了新对象，所以调用拷贝构造函数；</p><p>第二种情况：将对象p的值复制给已经存在的对象p2，为一个已经存在的对象赋值，所以调用赋值运算符；</p><p>第三种情况：以值传递的方式将对象p2传入函数内，所以是调用拷贝构造函数创建一个函数do1可用的实参；</p><p>第四种情况：函数do2以值的方式返回一个对象，由于这是一个局部对象，声明周期在函数内，所以返回的是一个它的拷贝，具体就是在返回时调用拷贝构造函数创建一个临时对象作为返回值；返回后调用赋值运算符将该临时对象复制给已经存在的对象p2；所以先调用拷贝构造函数，再调用赋值运算符；</p><p>第五种情况：按理来说应该先调用一次拷贝构造函数创建临时对象，再调用拷贝构造函数用临时对象创建新对象p3，调用两次拷贝构造函数，但是这实际上只调用了一次拷贝构造函数，这是因为直接在函数返回时调用拷贝构造函数创建了对象p3，因为编译器认为返回临时对象这一步是多余的，直接把p3当做了“临时对象”。</p><h3 id="3-拷贝构造函数必须以引用的方式传递参数">3.拷贝构造函数必须以引用的方式传递参数</h3><p>这一点要特别注意，即拷贝构造函数的形参必须是引用或者常引用：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Person</span>(<span class="keyword">const</span> Person&amp; p)</span><br></pre></td></tr></table></figure><p>而不能是值或者指针，下面分别对以值的方式传递参数和以指针的方式传递参数进行分析。</p><p>1.以值的方式传递参数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Person</span>(<span class="keyword">const</span> Person p)</span><br></pre></td></tr></table></figure><p>看起来好像和传引用的方式相比只是减少了一次内存拷贝，其实实际上不是这样的。这种情况编译器会报错，原因是<strong>在以值的方式传递参数的时候，会调用拷贝构造函数生成函数的实参，但是拷贝构造函数的参数是值的方式，将会继续调用拷贝构造函数，这样就会无限递归的调用下去，直到函数的栈溢出</strong>，所以值的方式传递参数是编译器绝对不允许的。</p><p>上面这句话可能一下子不太容易理解，没关系，下面我们详细的进行分析。</p><p>在进行值传递参数的时候，会调用拷贝构造函数对实参(假设实参为p)进行一次拷贝，假设新生成的对象叫做tmp，即<code>Person tmp = p</code>，tmp是一个新对象，根据上面的分析，我们知道在进行这个操作的时候，也会调用拷贝构造函数，但是拷贝构造函数的参数是值啊，值传递参数又会调用拷贝构造函数进行拷贝，生成新对象又会调用拷贝构造函数…，这样就会无限循环下去。</p><p>2.以指针的方式传递参数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Person</span>(<span class="keyword">const</span> Person* p)</span><br></pre></td></tr></table></figure><p>恩，这种方式的确不会报错，如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">A</span>(<span class="keyword">int</span> a) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;a = a;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;in constructor&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">A</span>(A* test) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;a = test-&gt;a;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;in copy constructor&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printA</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="keyword">this</span>-&gt;a &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="function">A <span class="title">a</span><span class="params">(<span class="number">2</span>)</span></span>;</span><br><span class="line"><span class="function">A <span class="title">b</span><span class="params">(&amp;a)</span></span>;</span><br><span class="line">b.<span class="built_in">printA</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">in constructor</span><br><span class="line">in copy constructor</span><br><span class="line">2</span><br></pre></td></tr></table></figure><p>确实是调用了拷贝构造函数，但是<code>A(A* test)</code>真的是拷贝构造函数吗？答案是否定的：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">A</span>(<span class="keyword">int</span> a) &#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;a = a;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;in constructor&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">A</span>(A* test) &#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;a = test-&gt;a;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;in copy constructor&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="keyword">this</span>-&gt;a &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="function">A <span class="title">a</span><span class="params">(<span class="number">2</span>)</span></span>;</span><br><span class="line"><span class="function">A <span class="title">b</span><span class="params">(&amp;a)</span></span>;</span><br><span class="line">A c = a;</span><br><span class="line">b.<span class="built_in">printA</span>();</span><br><span class="line">c.<span class="built_in">printA</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">in constructor</span><br><span class="line">in copy constructor</span><br><span class="line">2</span><br><span class="line">2</span><br></pre></td></tr></table></figure><p>发现<code>in copy constructor</code>只打印了一次，也就是说<code>A c = a;</code>并没有调用<code>A(A* test)</code>，那调用的拷贝构造函数是哪个呢？毫无疑问，是默认拷贝构造函数，默认拷贝构造函数还存在，说明<code>A(A* test)</code>并不是拷贝构造函数。</p><h3 id="4-总结">4.总结</h3><p>1.区分调用拷贝构造函数还是拷贝赋值运算符的依据是看是否生成了新对象，生成，拷贝构造函数，不生成，赋值运算符；<br>2.调用拷贝构造函数的三种情况：值传递，值方式返回局部对象，使用一个已有对象初始化一个新对象；<br>3.拷贝构造函数必须以引用的方式传递参数，因为值方式会造成栈区溢出，编译器不允许；指针方式根本不是拷贝构造函数。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;引言：本文主要介绍了拷贝构造函数和赋值运算符的区别，以及在什么时候调用拷贝构造函数、什么情况下调用赋值运算符；同时较为详细的说明了拷贝构造函数必须以引用的方式传递参数。&lt;/p&gt;</summary>
    
    
    
    <category term="C++" scheme="http://example.com/categories/C/"/>
    
    
    <category term="拷贝构造函数" scheme="http://example.com/tags/%E6%8B%B7%E8%B4%9D%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/"/>
    
    <category term="拷贝复制运算符" scheme="http://example.com/tags/%E6%8B%B7%E8%B4%9D%E5%A4%8D%E5%88%B6%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    
  </entry>
  
  <entry>
    <title>C++11之delete</title>
    <link href="http://example.com/2021/04/12/C-11%E4%B9%8Bdeleate/"/>
    <id>http://example.com/2021/04/12/C-11%E4%B9%8Bdeleate/</id>
    <published>2021-04-12T14:56:47.000Z</published>
    <updated>2021-04-12T15:47:38.308Z</updated>
    
    <content type="html"><![CDATA[<p>引言：delete关键字可以禁用某些函数，或者不期望转换和操作符。</p><span id="more"></span><h3 id="1-背景">1.背景</h3><p>对于 C++ 的类，如果程序员没有为其定义特殊成员函数，那么在需要用到某个特殊成员函数的时候，编译器会隐式的自动生成一个默认的特殊成员函数，比如拷贝构造函数，或者拷贝赋值操作符。例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">X</span>();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">X x1;</span><br><span class="line">X x2 = x1; <span class="comment">// 正确，调用编译器隐式生成的默认拷贝构造函数</span></span><br><span class="line">X x3;</span><br><span class="line">x3 = x1; <span class="comment">// 正确，调用编译器隐式生成的默认拷贝赋值操作符</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述程序中，程序员不需要自己手动编写拷贝构造函数以及拷贝赋值操作符，依靠编译器自动生成的默认拷贝构造函数以及拷贝赋值操作符就可以实现类对象的拷贝和赋值。这在某些情况下是非常方便省事的，但是在某些情况下，假设我们<strong>不允许发生类对象之间的拷贝和赋值</strong>，可是又无法阻止编译器隐式自动生成默认的拷贝构造函数以及拷贝赋值操作符，那这就成为一个问题了。</p><h3 id="2-delete的提出">2.delete的提出</h3><p>为了能够让程序员显式的禁用某个函数，C++11标准引入了一个新特性：delete函数。程序员只需在函数声明后加上<code>=delete</code>，就可将该函数禁用。例如，我们可以将类 X 的拷贝构造函数以及拷贝赋值操作符声明为 delete函数，就可以禁止类 X 对象之间的拷贝和赋值。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">X</span>();</span><br><span class="line"><span class="built_in">X</span>(<span class="keyword">const</span> X&amp;) = <span class="keyword">delete</span>; <span class="comment">// 声明拷贝构造函数为delete函数</span></span><br><span class="line">X&amp; <span class="keyword">operator</span> = (<span class="keyword">const</span> X&amp;) = <span class="keyword">delete</span>; <span class="comment">// 声明拷贝赋值操作符为delete函数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">X x1;</span><br><span class="line">X x2=x1; <span class="comment">// 错误，拷贝构造函数被禁用</span></span><br><span class="line">X x3;</span><br><span class="line">x3=x1; <span class="comment">// 错误，拷贝赋值操作符被禁用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述程序中，虽然只显式的禁用了一个拷贝构造函数和一个拷贝赋值操作符，但是由于编译器检测到类 X 存在用户自定义的拷贝构造函数和拷贝赋值操作符的声明，所以不会再隐式的生成其它参数类型的拷贝构造函数或拷贝赋值操作符，也就相当于类 X 没有任何拷贝构造函数和拷贝赋值操作符，所以对象间的拷贝和赋值被完全禁止了。</p><h3 id="3-delete的用法及示例">3.delete的用法及示例</h3><p>delete函数特性还可用于禁用类的某些转换构造函数，从而避免不期望的类型转换。在下面程序中，假设类 X 只支持参数为双精度浮点数double类型的转换构造函数，而不支持参数为整数int类型的转换构造函数，则可以将参数为int类型的转换构造函数声明为delete函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">X</span>(<span class="keyword">double</span>);</span><br><span class="line"><span class="built_in">X</span>(<span class="keyword">int</span>) = <span class="keyword">delete</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="function">X <span class="title">x1</span><span class="params">(<span class="number">1.2</span>)</span></span>;</span><br><span class="line"><span class="function">X <span class="title">x2</span><span class="params">(<span class="number">2</span>)</span></span>; <span class="comment">// 错误，参数为整数int类型的转换构造函数被禁用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>delete函数特性还可以用来禁用某些用户自定义的类的new操作符，从而避免在自由存储区创建类的对象。例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="keyword">size_t</span>)</span> </span>= <span class="keyword">delete</span>;</span><br><span class="line"><span class="keyword">void</span> *<span class="keyword">operator</span> <span class="keyword">new</span>[](<span class="keyword">size_t</span>) = <span class="keyword">delete</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">X *pa = <span class="keyword">new</span> X; <span class="comment">// 错误，new操作符被禁用</span></span><br><span class="line">X *pb = <span class="keyword">new</span> X[<span class="number">10</span>]; <span class="comment">// 错误，new[]操作符被禁用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>必须在函数第一次声明的时候将其声明为delete函数，否则编译器会报错。即对于类的成员函数而言，delete函数必须在类体里（inline）定义，而不能在类体外（out-of-line）定义。例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">X</span>(<span class="keyword">const</span> X&amp;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">X::<span class="built_in">X</span>(<span class="keyword">const</span> X&amp;) = <span class="keyword">delete</span>; <span class="comment">// 错误，delete函数必须在函数第一次声明处声明</span></span><br></pre></td></tr></table></figure><p>虽然 default函数特性规定了只有类的特殊成员函数才能被声明为default函数，但是delete函数特性并没有此限制。非类的成员函数，即普通函数也可以被声明为 delete函数。例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>)</span> </span>= <span class="keyword">delete</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a, b;</span><br><span class="line"><span class="built_in">add</span>(a, b); <span class="comment">// 错误，函数add(int, int)被禁用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>值得一提的是，在上述程序中，虽然 add(int, int)函数被禁用了，但是禁用的仅是函数的定义，即该函数不能被调用。但是函数标示符add仍是有效的，在名字查找和函数重载解析时仍会查找到该函数标示符。如果编译器在解析重载函数时，解析结果为已经delete的函数，则会出现编译错误。例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span> </span>= <span class="keyword">delete</span>;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">add</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="built_in">add</span>(<span class="number">1</span>, <span class="number">3</span>) &lt;&lt; endl; <span class="comment">// 错误，调用delete函数add(int, int)</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">add</span>(<span class="number">1.2</span>, <span class="number">1.3</span>) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-总结">4.总结</h3><p>1.delete函数用于禁用某个函数；<br>2.delete必须在函数第一次声明的时候使用，对于类的成员函数，即只能在类体内使用，这点和default不同；<br>3.delete既可以用于类的特殊成员函数，也可用于普通函数；<br>4.delete可以用来禁用某些用户自定义的类的new操作符，从而避免在自由存储区创建类的对象;<br>5.delete可以通过参数禁用某种参数类型的函数，并不会禁用函数的标识符，所以不会影响函数重载；</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;引言：delete关键字可以禁用某些函数，或者不期望转换和操作符。&lt;/p&gt;</summary>
    
    
    
    <category term="C++" scheme="http://example.com/categories/C/"/>
    
    
    <category term="C++11" scheme="http://example.com/tags/C-11/"/>
    
    <category term="delete关键字" scheme="http://example.com/tags/delete%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    
  </entry>
  
  <entry>
    <title>C++11之default</title>
    <link href="http://example.com/2021/04/10/C-11%E4%B9%8Bdefault/"/>
    <id>http://example.com/2021/04/10/C-11%E4%B9%8Bdefault/</id>
    <published>2021-04-10T09:59:20.000Z</published>
    <updated>2021-04-12T15:11:09.531Z</updated>
    
    <content type="html"><![CDATA[<p>引言：对于default函数，编译器会自动生成函数体定义，从而获得更高的代码执行效率。同时说明了为什么基类的析构函数一定要显式定义成虚析构函数。</p><span id="more"></span><h3 id="1-背景">1.背景</h3><p>C++有4类特殊成员函数，分别是：默认构造函数，默认析构函数，拷贝构造函数以及拷贝赋值运算符，这些类的特殊成员函数负责创建、初始化、销毁，或者拷贝类的对象。如果程序员没有显式地为一个类定义某个特殊成员函数，而又需要用到该特殊成员函数时，则编译器会隐式的为这个类生成一个默认的特殊成员函数。例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">X x;</span><br></pre></td></tr></table></figure><p>在上述程序中，程序员并没有定义类 X 的默认构造函数，但是在创建类 X 的对象 x 的时候，又需要用到类 X 的默认构造函数，此时，编译器会隐式的为类 X 生成一个默认构造函数。该自动生成的默认构造函数没有参数，包含一个空的函数体，即<code>X::X() &#123;&#125;</code>。虽然自动生成的默认构造函数仅有一个空函数体，但是它仍可用来成功创建类 X 的对象 x，上述程序可以编译通过。</p><p>但是，如果程序员为类 X 显式的自定义了非默认构造函数，却没有定义默认构造函数的时候，将会出现编译错误：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">X</span>(<span class="keyword">int</span> i) &#123;</span><br><span class="line">a = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line">&#125;;<span class="comment">// 编译出错</span></span><br></pre></td></tr></table></figure><p>编译出错的原因在于类 X 已经有了用户自定义的构造函数，所以编译器将不再会为它隐式的生成默认构造函数。如果需要用到默认构造函数来创建类的对象时，程序员必须自己显式的定义默认构造函数。例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">X</span>() &#123;&#125;; <span class="comment">// 手动定义默认构造函数</span></span><br><span class="line"><span class="built_in">X</span>(<span class="keyword">int</span> i) &#123;</span><br><span class="line">a = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>从上述程序可以看出，原本期望编译器自动生成的默认构造函数需要程序员手动编写了，即程序员的工作量加大了。此外，手动编写的默认构造函数的代码执行效率比编译器自动生成的默认构造函数低。类的其它几类特殊成员函数也和默认构造函数一样，当存在用户自定义的特殊成员函数时，编译器将不会隐式的自动生成默认特殊成员函数，而需要程序员手动编写，加大了程序员的工作量。类似的，手动编写的特殊成员函数的代码执行效率比编译器自动生成的特殊成员函数低。</p><h3 id="2-default的提出">2.default的提出</h3><p>为了解决上述两个问题：1. 减轻程序员的编程工作量；2. 获得编译器自动生成的默认特殊成员函数的高代码执行效率，C++11 标准引入了一个新特性：default函数。程序员只需在函数声明后加上<code>=default</code>，就可将该函数声明为 default函数，编译器将为显式声明的 default函数自动生成函数体。例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">X</span>()= <span class="keyword">default</span>;</span><br><span class="line"><span class="built_in">X</span>(<span class="keyword">int</span> i) &#123;</span><br><span class="line">a = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">X x;</span><br></pre></td></tr></table></figure><p>在上述程序中，编译器会自动生成默认构造函数 <code>X::X() &#123;&#125;</code>，该函数可以比用户自己定义的默认构造函数获得更高的代码效率。</p><h3 id="3-default的用法及示例">3.default的用法及示例</h3><p>default仅适用于类的特殊成员函数，且该特殊成员函数没有默认参数。例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">()</span> </span>= <span class="keyword">default</span>; <span class="comment">// 错误, 函数f()非类X的特殊成员函数</span></span><br><span class="line"><span class="built_in">X</span>(<span class="keyword">int</span>) = <span class="keyword">default</span>; <span class="comment">// 错误, 构造函数X(int) 非X的特殊成员函数</span></span><br><span class="line"><span class="built_in">X</span>(<span class="keyword">int</span> = <span class="number">1</span>) = <span class="keyword">default</span>; <span class="comment">// 错误, 默认构造函数X(int=1)含有默认参数</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>default函数既可以在类体里（inline）定义，也可以在类体外（out-of-line）定义。例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">X</span>() = <span class="keyword">default</span>; <span class="comment">//inline default默认构造函数</span></span><br><span class="line"><span class="built_in">X</span>(<span class="keyword">const</span> X&amp;);</span><br><span class="line">X&amp; <span class="keyword">operator</span> = (<span class="keyword">const</span> X&amp;);</span><br><span class="line">~<span class="built_in">X</span>() = <span class="keyword">default</span>; <span class="comment">//inline default析构函数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">X::<span class="built_in">X</span>(<span class="keyword">const</span> X&amp;) = <span class="keyword">default</span>; <span class="comment">//out-of-line default拷贝构造函数</span></span><br><span class="line">X&amp; X::<span class="keyword">operator</span> = (<span class="keyword">const</span> X&amp;) = <span class="keyword">default</span>;  <span class="comment">//out-of-line default拷贝赋值操作符</span></span><br></pre></td></tr></table></figure><p>在 C++ 代码编译过程中，如果程序员没有为类 X 定义析构函数，但是在销毁类 X 对象的时候又需要调用类 X 的析构函数时，编译器会自动隐式的为该类生成一个析构函数。该自动生成的析构函数没有参数，包含一个空的函数体，即<code>X::~X() &#123;&#125;</code>。例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Y</span> :</span> <span class="keyword">public</span> X &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">X* x = <span class="keyword">new</span> Y;</span><br><span class="line"><span class="keyword">delete</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述程序中，程序员没有为基类 X 和派生类 Y 定义析构函数，当在主函数内 delete 基类指针 x 的时候，需要调用基类的析构函数。于是，编译器会隐式自动的为类 X 生成一个析构函数，从而可以成功的销毁 x 指向的派生类对象中的基类子对象（即 int 型成员变量 x）。</p><p>但是，这段代码存在<strong>内存泄露</strong>的问题，当利用 delete 语句删除指向派生类对象的指针 x时，<strong>系统调用的是基类的析构函数，而非派生类 Y 类的析构函数</strong>，因此，编译器无法析构派生类的 int 型成员变量 y。</p><p>因此，一般情况下我们需要将基类的析构函数定义为虚函数，当利用 delete 语句删除指向派生类对象的基类指针时，系统会调用相应的派生类的析构函数（实现多态性），从而避免内存泄露。但是编译器隐式自动生成的析构函数都是非虚函数，这就需要由程序员手动的为基类 X 定义虚析构函数，例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">virtual</span> ~<span class="built_in">X</span>() &#123;&#125;; <span class="comment">// 手动定义虚析构函数</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Y</span> :</span> <span class="keyword">public</span> X &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">X* x = <span class="keyword">new</span> Y;</span><br><span class="line"><span class="keyword">delete</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述程序中，由于程序员手动为基类 X 定义了虚析构函数，当利用 delete 语句删除指向派生类对象的基类指针 x 时，系统会调用相应的派生类 Y 的析构函数（由编译器隐式自动生成）以及基类 X 的析构函数，从而将派生类对象完整的销毁，可以避免内存泄露。</p><p>但是，在清单 8 中，程序员需要手动的编写基类的虚构函数的定义（哪怕函数体是空的），增加了程序员的编程工作量。更值得一提的是，<strong>手动定义的析构函数的代码执行效率要低于编译器自动生成的析构函数</strong>。</p><p>为了解决上述问题，我们可以将基类的虚析构函数声明为default函数，这样就可以显式的指定编译器为该函数自动生成函数体。例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">virtual</span> ~<span class="built_in">X</span>() = <span class="keyword">default</span>; <span class="comment">// 编译器自动生成default函数定义体</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Y</span> :</span> <span class="keyword">public</span> X &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">X* x = <span class="keyword">new</span> Y;</span><br><span class="line"><span class="keyword">delete</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述程序中，编译器会自动生成虚析构函数<code>virtual X::~X() &#123;&#125;</code>，该函数比用户自己定义的虚析构函数具有更高的代码执行效率。</p><h3 id="4-总结">4.总结</h3><p>1.default只能用于类的特殊成员函数；<br>2.default解决了两个问题：一是减轻程序员编写函数定义的编程工作量，二是default定义的函数代码执行效率要高于手动编写；<br>3.default可以在类体内定义，也可在类体外定义；<br>4.基类的析构函数一定要显式地定义成虚析构函数。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;引言：对于default函数，编译器会自动生成函数体定义，从而获得更高的代码执行效率。同时说明了为什么基类的析构函数一定要显式定义成虚析构函数。&lt;/p&gt;</summary>
    
    
    
    <category term="C++" scheme="http://example.com/categories/C/"/>
    
    
    <category term="C++11" scheme="http://example.com/tags/C-11/"/>
    
    <category term="default关键字" scheme="http://example.com/tags/default%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    
    <category term="虚析构函数" scheme="http://example.com/tags/%E8%99%9A%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0/"/>
    
    <category term="代码执行效率" scheme="http://example.com/tags/%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%95%88%E7%8E%87/"/>
    
  </entry>
  
</feed>
